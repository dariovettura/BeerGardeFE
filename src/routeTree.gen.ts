/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as errors503RouteImport } from './routes/(errors)/503'
import { Route as errors500RouteImport } from './routes/(errors)/500'
import { Route as errors404RouteImport } from './routes/(errors)/404'
import { Route as errors403RouteImport } from './routes/(errors)/403'
import { Route as errors401RouteImport } from './routes/(errors)/401'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as DashboardSettingsRouteRouteImport } from './routes/dashboard/settings/route'
import { Route as DashboardSettingsIndexRouteImport } from './routes/dashboard/settings/index'
import { Route as DashboardOverviewIndexRouteImport } from './routes/dashboard/overview/index'
import { Route as DashboardSettingsNotificationsRouteImport } from './routes/dashboard/settings/notifications'
import { Route as DashboardSettingsDisplayRouteImport } from './routes/dashboard/settings/display'
import { Route as DashboardSettingsAppearanceRouteImport } from './routes/dashboard/settings/appearance'
import { Route as DashboardSettingsAccountRouteImport } from './routes/dashboard/settings/account'

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const errors503Route = errors503RouteImport.update({
  id: '/(errors)/503',
  path: '/503',
  getParentRoute: () => rootRouteImport,
} as any)
const errors500Route = errors500RouteImport.update({
  id: '/(errors)/500',
  path: '/500',
  getParentRoute: () => rootRouteImport,
} as any)
const errors404Route = errors404RouteImport.update({
  id: '/(errors)/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const errors403Route = errors403RouteImport.update({
  id: '/(errors)/403',
  path: '/403',
  getParentRoute: () => rootRouteImport,
} as any)
const errors401Route = errors401RouteImport.update({
  id: '/(errors)/401',
  path: '/401',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardSettingsRouteRoute = DashboardSettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardSettingsIndexRoute = DashboardSettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardSettingsRouteRoute,
} as any)
const DashboardOverviewIndexRoute = DashboardOverviewIndexRouteImport.update({
  id: '/overview/',
  path: '/overview/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardSettingsNotificationsRoute =
  DashboardSettingsNotificationsRouteImport.update({
    id: '/notifications',
    path: '/notifications',
    getParentRoute: () => DashboardSettingsRouteRoute,
  } as any)
const DashboardSettingsDisplayRoute =
  DashboardSettingsDisplayRouteImport.update({
    id: '/display',
    path: '/display',
    getParentRoute: () => DashboardSettingsRouteRoute,
  } as any)
const DashboardSettingsAppearanceRoute =
  DashboardSettingsAppearanceRouteImport.update({
    id: '/appearance',
    path: '/appearance',
    getParentRoute: () => DashboardSettingsRouteRoute,
  } as any)
const DashboardSettingsAccountRoute =
  DashboardSettingsAccountRouteImport.update({
    id: '/account',
    path: '/account',
    getParentRoute: () => DashboardSettingsRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/settings': typeof DashboardSettingsRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/settings/account': typeof DashboardSettingsAccountRoute
  '/dashboard/settings/appearance': typeof DashboardSettingsAppearanceRoute
  '/dashboard/settings/display': typeof DashboardSettingsDisplayRoute
  '/dashboard/settings/notifications': typeof DashboardSettingsNotificationsRoute
  '/dashboard/overview': typeof DashboardOverviewIndexRoute
  '/dashboard/settings/': typeof DashboardSettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/settings/account': typeof DashboardSettingsAccountRoute
  '/dashboard/settings/appearance': typeof DashboardSettingsAppearanceRoute
  '/dashboard/settings/display': typeof DashboardSettingsDisplayRoute
  '/dashboard/settings/notifications': typeof DashboardSettingsNotificationsRoute
  '/dashboard/overview': typeof DashboardOverviewIndexRoute
  '/dashboard/settings': typeof DashboardSettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/settings': typeof DashboardSettingsRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(errors)/401': typeof errors401Route
  '/(errors)/403': typeof errors403Route
  '/(errors)/404': typeof errors404Route
  '/(errors)/500': typeof errors500Route
  '/(errors)/503': typeof errors503Route
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/settings/account': typeof DashboardSettingsAccountRoute
  '/dashboard/settings/appearance': typeof DashboardSettingsAppearanceRoute
  '/dashboard/settings/display': typeof DashboardSettingsDisplayRoute
  '/dashboard/settings/notifications': typeof DashboardSettingsNotificationsRoute
  '/dashboard/overview/': typeof DashboardOverviewIndexRoute
  '/dashboard/settings/': typeof DashboardSettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/settings'
    | '/login'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/dashboard/'
    | '/dashboard/settings/account'
    | '/dashboard/settings/appearance'
    | '/dashboard/settings/display'
    | '/dashboard/settings/notifications'
    | '/dashboard/overview'
    | '/dashboard/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/dashboard'
    | '/dashboard/settings/account'
    | '/dashboard/settings/appearance'
    | '/dashboard/settings/display'
    | '/dashboard/settings/notifications'
    | '/dashboard/overview'
    | '/dashboard/settings'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/settings'
    | '/(auth)/login'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/dashboard/'
    | '/dashboard/settings/account'
    | '/dashboard/settings/appearance'
    | '/dashboard/settings/display'
    | '/dashboard/settings/notifications'
    | '/dashboard/overview/'
    | '/dashboard/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  errors401Route: typeof errors401Route
  errors403Route: typeof errors403Route
  errors404Route: typeof errors404Route
  errors500Route: typeof errors500Route
  errors503Route: typeof errors503Route
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/settings/': {
      id: '/dashboard/settings/'
      path: '/'
      fullPath: '/dashboard/settings/'
      preLoaderRoute: typeof DashboardSettingsIndexRouteImport
      parentRoute: typeof DashboardSettingsRouteRoute
    }
    '/dashboard/overview/': {
      id: '/dashboard/overview/'
      path: '/overview'
      fullPath: '/dashboard/overview'
      preLoaderRoute: typeof DashboardOverviewIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/settings/notifications': {
      id: '/dashboard/settings/notifications'
      path: '/notifications'
      fullPath: '/dashboard/settings/notifications'
      preLoaderRoute: typeof DashboardSettingsNotificationsRouteImport
      parentRoute: typeof DashboardSettingsRouteRoute
    }
    '/dashboard/settings/display': {
      id: '/dashboard/settings/display'
      path: '/display'
      fullPath: '/dashboard/settings/display'
      preLoaderRoute: typeof DashboardSettingsDisplayRouteImport
      parentRoute: typeof DashboardSettingsRouteRoute
    }
    '/dashboard/settings/appearance': {
      id: '/dashboard/settings/appearance'
      path: '/appearance'
      fullPath: '/dashboard/settings/appearance'
      preLoaderRoute: typeof DashboardSettingsAppearanceRouteImport
      parentRoute: typeof DashboardSettingsRouteRoute
    }
    '/dashboard/settings/account': {
      id: '/dashboard/settings/account'
      path: '/account'
      fullPath: '/dashboard/settings/account'
      preLoaderRoute: typeof DashboardSettingsAccountRouteImport
      parentRoute: typeof DashboardSettingsRouteRoute
    }
  }
}

interface DashboardSettingsRouteRouteChildren {
  DashboardSettingsAccountRoute: typeof DashboardSettingsAccountRoute
  DashboardSettingsAppearanceRoute: typeof DashboardSettingsAppearanceRoute
  DashboardSettingsDisplayRoute: typeof DashboardSettingsDisplayRoute
  DashboardSettingsNotificationsRoute: typeof DashboardSettingsNotificationsRoute
  DashboardSettingsIndexRoute: typeof DashboardSettingsIndexRoute
}

const DashboardSettingsRouteRouteChildren: DashboardSettingsRouteRouteChildren =
  {
    DashboardSettingsAccountRoute: DashboardSettingsAccountRoute,
    DashboardSettingsAppearanceRoute: DashboardSettingsAppearanceRoute,
    DashboardSettingsDisplayRoute: DashboardSettingsDisplayRoute,
    DashboardSettingsNotificationsRoute: DashboardSettingsNotificationsRoute,
    DashboardSettingsIndexRoute: DashboardSettingsIndexRoute,
  }

const DashboardSettingsRouteRouteWithChildren =
  DashboardSettingsRouteRoute._addFileChildren(
    DashboardSettingsRouteRouteChildren,
  )

interface DashboardRouteRouteChildren {
  DashboardSettingsRouteRoute: typeof DashboardSettingsRouteRouteWithChildren
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardOverviewIndexRoute: typeof DashboardOverviewIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardSettingsRouteRoute: DashboardSettingsRouteRouteWithChildren,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardOverviewIndexRoute: DashboardOverviewIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
  errors401Route: errors401Route,
  errors403Route: errors403Route,
  errors404Route: errors404Route,
  errors500Route: errors500Route,
  errors503Route: errors503Route,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
